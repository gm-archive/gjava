package org.gjava.actoreditor;


import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.Serializable;
import java.util.Iterator;
import javax.swing.Action;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.ErrorManager;
import org.openide.explorer.ExplorerManager;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
final class ActorEditorTopComponent extends TopComponent implements PropertyChangeListener
{
    
    private static ActorEditorTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/gjava/actoreditor/object.png";
    
    private static final String PREFERRED_ID = "ActorEditorTopComponent";
    
    public String path = "";
    
    private ExplorerManager explorerManager;
    
    private int draggingIndex = -1;
    
    private ActorEditorTopComponent()
    {
        this(new InstanceContent());
    }
    
    
    
    public ActorEditorTopComponent(InstanceContent content)
    {
        super( new AbstractLookup( content ) );
        
        
        //setup properties
        explorerManager = new ExplorerManager();
        explorerManager.addPropertyChangeListener(this);
        content.add( explorerManager);
        
        //setup palette
        final PaletteController controller= initializePalette();
        content.add( controller );
        
        
        
        controller.addPropertyChangeListener( new PropertyChangeListener()
        {
            public void propertyChange(PropertyChangeEvent arg0)
            {
                // throw new UnsupportedOperationException("Not supported yet.");
            }
        }); // removed to save space
       
        initComponents();
       // this.setActivatedNodes(node);
        
        // setDragEnabled relates to inter-component drag&drop
        actionList1.setDragEnabled(true);
        
        
        
        
        setName(NbBundle.getMessage(ActorEditorTopComponent.class, "CTL_ActorEditorTopComponent"));
        setToolTipText(NbBundle.getMessage(ActorEditorTopComponent.class, "HINT_ActorEditorTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        actionList1 = new org.gjava.actoreditor.beans.ActionList();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventList = new org.gjava.actoreditor.beans.EventList();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();

        jSplitPane1.setDividerSize(8);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setForeground(new java.awt.Color(0, 51, 255));
        jLabel3.setText("Actions: ");

        actionList1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                actionList1MouseDragged(evt);
            }
        });
        actionList1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                actionList1MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(actionList1);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addContainerGap(262, Short.MAX_VALUE))
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        jLabel2.setText("Events: ");

        eventList.setToolTipText("Drop the events here!");
        eventList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                eventListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(eventList);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addContainerGap(184, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        jButton1.setText("Save");

        jCheckBox1.setText("Solid");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jCheckBox2.setText("Visible");
        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox2.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jButton2.setText("Change Images");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jButton1)
                .add(28, 28, 28)
                .add(jCheckBox1)
                .add(20, 20, 20)
                .add(jCheckBox2)
                .add(20, 20, 20)
                .add(jButton2)
                .add(240, 240, 240))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .add(jButton2)
                    .add(jCheckBox2)
                    .add(jCheckBox1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 458, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void eventListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_eventListValueChanged
    
    actionList1.setModel(((Value) eventList.getSelectedValue()).actions);
    
}//GEN-LAST:event_eventListValueChanged
    

private void actionList1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionList1MouseDragged
    
    final int newIndex = actionList1.locationToIndex(evt.getPoint());
    
    if (newIndex != draggingIndex)
    {
        Object temp = actionList1.model.get(draggingIndex);
        
        actionList1.model.set(draggingIndex, actionList1.model.get(newIndex));
        actionList1.model.set(newIndex, temp);
        
        draggingIndex = newIndex;
    }
}//GEN-LAST:event_actionList1MouseDragged

private void actionList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionList1MouseReleased
    // TODO add your handling code here:
    draggingIndex = -1;
}//GEN-LAST:event_actionList1MouseReleased

    private void MousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_MousePressed
    {//GEN-HEADEREND:event_MousePressed
        draggingIndex = actionList1.locationToIndex(evt.getPoint());
}//GEN-LAST:event_MousePressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.gjava.actoreditor.beans.ActionList actionList1;
    private org.gjava.actoreditor.beans.EventList eventList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ActorEditorTopComponent getDefault()
    {
        if (instance == null)
        {
            instance = new ActorEditorTopComponent(new InstanceContent());
        }
        return instance;
    }
    
    /**
     * Obtain the ActorEditorTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ActorEditorTopComponent findInstance()
    {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null)
        {
            ErrorManager.getDefault().log(ErrorManager.WARNING,
                    "Cannot find MyWindow component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ActorEditorTopComponent)
        {
            return (ActorEditorTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING,
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    
    public int getPersistenceType()
    {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }
    
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace()
    {
        return new ResolvableHelper();
    }
    
    protected String preferredID()
    {
        return PREFERRED_ID;
    }
    
    private PaletteController initializePalette()
    {
        try
        {
            return PaletteFactory.createPalette(  "ActorEditorPalette",new PaletteActions()
            {
                public Action[] getCustomCategoryActions(Lookup lookup)
                {
                    return new Action[0];
                }
                public Action[] getCustomItemActions(Lookup lookup)
                {
                    return new Action[0];
                }
                public Action[] getCustomPaletteActions()
                {
                    return new Action[0];
                }
                public Action[] getImportActions()
                {
                    return new Action[0];
                }
                public Action getPreferredAction(Lookup lookup)
                {
                    return null; //TODO
                }
            });
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
            
        }
        return null;
    }
    
    
    public static ActorEditorTopComponent getInstance(String name)
    {
        // look for an open instance containing this feed
        Iterator opened = TopComponent.getRegistry().getOpened().iterator();
        while (opened.hasNext())
        {
            Object tc = opened.next();
            if (tc instanceof ActorEditorTopComponent)
            {
                ActorEditorTopComponent elc = (ActorEditorTopComponent)tc;
                System.out.println(name+" "+elc.path);
                if (name.equals(elc.path))
                {
                    //elc.requestActive();
                    return elc;
                }
            }
        }
        
        // none found, make a new one
        return new ActorEditorTopComponent();
    }
    
    
    final static class ResolvableHelper implements Serializable
    {
        private static final long serialVersionUID = 1L;
        public Object readResolve()
        {
            return ActorEditorTopComponent.getDefault();
        }
    }
    
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == explorerManager &&
                ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName()))
        {
            setActivatedNodes(explorerManager.getSelectedNodes());
        }
    }
    
    
}
