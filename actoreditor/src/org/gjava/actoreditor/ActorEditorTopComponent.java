package org.gjava.actoreditor;

import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import org.gjava.actoreditor.Value;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.util.Enumeration;
import java.util.Iterator;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.gjava.actoreditor.Action.ActionData;
import org.gjava.actoreditor.beans.ActionList;
import org.gjava.actoreditor.beans.EventList;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.ErrorManager;
import org.openide.explorer.ExplorerManager;
import org.openide.filesystems.FileLock;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
public class ActorEditorTopComponent extends TopComponent implements PropertyChangeListener
{
    
    private static ActorEditorTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/gjava/actoreditor/object.png";
    
    public actorDataObject ado;
    
    private static final String PREFERRED_ID = "ActorEditorTopComponent";
    
    public String path = "", image="";
    
    private ExplorerManager explorerManager;
    
    private int draggingIndex = -1;
    
    private ActorEditorTopComponent(actorDataObject a)
    {
       this(new InstanceContent());
        this.a = a;
        
    }
    
    
        
    public ActorEditorTopComponent(InstanceContent content)
    {
       
            super(new org.openide.util.lookup.AbstractLookup(content));
            
            explorerManager = new org.openide.explorer.ExplorerManager();
            explorerManager.addPropertyChangeListener(this);
            content.add(explorerManager);
            final org.netbeans.spi.palette.PaletteController controller = initializePalette();

            content.add(controller);
            controller.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

                                                     public void propertyChange(java.beans.PropertyChangeEvent arg0) {
                                                     }
                                                 });
            initComponents();
            actionList1.setDragEnabled(true);
            setName(org.openide.util.NbBundle.getMessage(org.gjava.actoreditor.ActorEditorTopComponent.class,
                                                         "CTL_ActorEditorTopComponent"));
            setToolTipText(org.openide.util.NbBundle.getMessage(org.gjava.actoreditor.ActorEditorTopComponent.class,
                                                                "HINT_ActorEditorTopComponent"));
            setIcon(org.openide.util.Utilities.loadImage(ICON_PATH, true));
           
}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        actionList1 = new ActionList(this);
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventList = new EventList(this);
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();

        jSplitPane1.setDividerSize(8);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setForeground(new java.awt.Color(0, 51, 255));
        jLabel3.setText("Actions: ");

        /*actionList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });*/
        jScrollPane2.setViewportView(actionList1);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addContainerGap(262, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .add(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        jLabel2.setText("Events: ");

        /*eventList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });*/
        jScrollPane1.setViewportView(eventList);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addContainerGap(284, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel2);
        

        jButton1.setText("Save");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jCheckBox1.setText("Solid");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jCheckBox2.setText("Visible");
        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        
        eventList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                eventListValueChanged(evt);
            }
        });
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCheckBox1)
                    .add(jCheckBox2)
                    
                    .add(jButton1))
                .add(14, 14, 14)
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(16, 16, 16)
                .add(jCheckBox1)
                .add(14, 14, 14)
                .add(jCheckBox2)
                .add(15, 15, 15)
               
                .addContainerGap()
                .add(jButton1)
                
                .add(264, 264, 264))
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
        );
        
        jScrollPane3.setViewportView(jLabel4);
        
        jSplitPane1.setDividerLocation(0.5);
        
        setDropTarget(new DropTarget(this,new DropTargetListener()
        {
            public void dragEnter(DropTargetDragEvent dropTargetDragEvent)
            {
                //not needed
            }
            public void dragExit(DropTargetEvent dropTargetEvent)
            {
                //not needed
            }
            public void dragOver(DropTargetDragEvent dtde)
            {
                if( dtde.isDataFlavorSupported(Utilz.IMAGE_DATA_FLAVOR ) )
                {
                    //only accept object of our type
                    dtde.acceptDrag( DnDConstants.ACTION_COPY_OR_MOVE );
                }
                else
                {
                    //reject everything else
                    dtde.rejectDrag();
                }
            }
            public void drop(DropTargetDropEvent dtde)
            {
                //first check if we support this type of data
                if( !dtde.isDataFlavorSupported( Utilz.IMAGE_DATA_FLAVOR ) )
                {
                    dtde.rejectDrop();
                }
                //accept the drop so that we can access the Transferable
                dtde.acceptDrop( DnDConstants.ACTION_COPY_OR_MOVE );
                ImageData data = null;
                try
                {
                    //get the dragged data from the transferable
                    //get the dragged data from the transferable
                    //get the dragged data from the transferable
                    //get the dragged data from the transferable
                    data = (ImageData) dtde.getTransferable().getTransferData(Utilz.IMAGE_DATA_FLAVOR);
                }
                catch (IOException ex)
                {
                    ex.printStackTrace();
                }
                catch (UnsupportedFlavorException ex)
                {
                    ex.printStackTrace();
                }
                
                dtde.dropComplete( null != data );
                if( null != data )
                {
                  
                }
                ado.data.img = data.path;
                Icon image = new ImageIcon( data.path );
                setimage(data.path);
                jLabel4.setIcon(image);
            }
            
            
            
            public void dropActionChanged(DropTargetDragEvent dropTargetDragEvent)
            {
            }
        }));
    }
    
private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    //save the actor to xml file
    save();
}//GEN-LAST:event_jButton1MouseClicked


public final void setimage(String image)
{
    this.image = image;
}

private void save()
{
    FileLock lock;
    try
    {
        lock= ado.getPrimaryFile().lock();
    }
    catch (Exception e)
    {
        return;
    }
    {
        java.io.PrintWriter to = null;
        
        try
        {
            to = new java.io.PrintWriter(ado.getPrimaryFile().getOutputStream(lock));
            try
            {
                to.println("<?xml version=\"1.0\"?>");
                
                if (jLabel4.getIcon() == null)
                    to.println("<Image>null</Image>");
                else
                    to.println("<Image>"+this.image+"</Image>");
                
                if (jCheckBox1.isSelected() == true)
                    to.println("<Solid>True</Solid>");
                else
                    to.println("<Solid>False</Solid>");
                if (jCheckBox2.isSelected() == true)
                    to.println("<Visible>True</Visible>");
                else
                    to.println("<Visible>False</Visible>");
                
                //save events/actions
                for (Enumeration e = eventList.events.elements() ; e.hasMoreElements() ;)
                {
                    Value v = (Value)e.nextElement();
                    to.println("<Event>");
                    to.println("<Name>"+v.value+"</Name>");
                    to.println("<Image>"+v.img+"</Image>");
                    
                    for (Enumeration ee = v.actions.elements() ; ee.hasMoreElements() ;)
                    {
                        ActionValue vv = (ActionValue)ee.nextElement();
                        to.println("<Action>");
                        to.println("<Name>"+vv.value+"</Name>");
                        to.println("<Image>"+vv.img+"</Image>");
                        to.println("<Code>"+vv.code+"</Code>");
                        to.println("</Action>");
                    }
                    to.println("</Event>");
                }
            }
            finally
            {
                to.close();
            }
        }
        catch (IOException ex)
        {
            Exceptions.printStackTrace(ex);
        }
        finally
        {
            lock.releaseLock();
            to.close();
        }
    }
    
}

public void openfile() throws Exception
{
   
    eventList.events.clear();
    BufferedReader from=new BufferedReader(new InputStreamReader(ado.getPrimaryFile().getInputStream()));
    try
    {
        String line;
        while ((line=from.readLine()) != null)
        {
            if (line.contains("<Image>") && line.contains("</Image>"))
            {
               this.image = line.replaceAll("<Image>", "").replaceAll("</Image>", "");
               if (!this.image.equals("null") )
                   jLabel4.setIcon(new ImageIcon(this.image));
            }
            if (line.contains("<Solid>") && line.contains("</Solid>"))
            {
                if (line.contains("True") )
                    
                    jCheckBox1.setSelected(true);
                
                else
                    jCheckBox1.setSelected(false);
            }
            if (line.contains("<Visible>") && line.contains("</Visible>"))
            {
                if (line.contains("True") )
                    
                    jCheckBox2.setSelected(true);
                
                else
                    jCheckBox2.setSelected(false);
            }
            
            if (line.equals("<Event>"))
            {
                line=from.readLine();
                String name="",img="",code="";
                if (line.contains("<Name>") && line.contains("</Name>"))
                {
                    name = line.replaceAll("<Name>", "").replaceAll("</Name>", "");
                }
                line=from.readLine();
                if (line.contains("<Image>") && line.contains("</Image>"))
                {
                    img = line.replaceAll("<Image>", "").replaceAll("</Image>", "");
                    
                }
                eventList.events.addElement(new Value(name,img, new DefaultListModel() )) ;
               
                line=from.readLine();
                while (!line.equals("</Event>"))
                {
                    //get actions
                    if (line.equals("<Action>"))
                    {
                        line=from.readLine();
                        if (line.contains("<Name>") && line.contains("</Name>"))
                        {
                            name = line.replaceAll("<Name>", "").replaceAll("</Name>", "");
                        }
                        line=from.readLine();
                        if (line.contains("<Image>") && line.contains("</Image>"))
                        {
                            img = line.replaceAll("<Image>", "").replaceAll("</Image>", "");
                            System.out.println(img);
                        }
                        line=from.readLine();
                        if (line.contains("<Code>") && line.contains("</Code>"))
                        {
                            code = line.replaceAll("<Image>", "").replaceAll("</Image>", "");
                            System.out.println(img);
                        }
                        line=from.readLine();//</Action>
                        // add the action
                        Value v = (Value)eventList.events.lastElement();
                        v.actions.addElement(new ActionValue(name,img,code ));
                    }
                    line=from.readLine();
                }
                   
            }
           
        }
    }
    finally
    {
        from.close();
    }
}

private void eventListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_eventListValueChanged
    if (eventList.getSelectedValue() == null)
    {
       return; 
    }
    actionList1.setModel(((Value) eventList.getSelectedValue()).actions);
    
}//GEN-LAST:event_eventListValueChanged


private void actionList1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionList1MouseDragged
    
    final int newIndex = actionList1.locationToIndex(evt.getPoint());
    
    if (newIndex != draggingIndex)
    {
        Object temp = actionList1.model.get(draggingIndex);
        
        actionList1.model.set(draggingIndex, actionList1.model.get(newIndex));
        actionList1.model.set(newIndex, temp);
        
        draggingIndex = newIndex;
    }
}//GEN-LAST:event_actionList1MouseDragged

private void actionList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionList1MouseReleased
    // TODO add your handling code here:
    draggingIndex = -1;
}//GEN-LAST:event_actionList1MouseReleased

    private void MousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_MousePressed
    {//GEN-HEADEREND:event_MousePressed
        draggingIndex = actionList1.locationToIndex(evt.getPoint());
}//GEN-LAST:event_MousePressed
    
    
    
    public ActionList actionList1;
    public EventList eventList;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    public final javax.swing.JLabel jLabel4 =new JLabel("Drop image here!");
    
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ActorEditorTopComponent getDefault()
    {
        if (instance == null)
        {
            //instance = new ActorEditorTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the ActorEditorTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ActorEditorTopComponent findInstance()
    {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null)
        {
            ErrorManager.getDefault().log(ErrorManager.WARNING,
                    "Cannot find MyWindow component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ActorEditorTopComponent)
        {
            return (ActorEditorTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING,
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    
    public int getPersistenceType()
    {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }
    
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace()
    {
        return new ResolvableHelper();
    }
    
    protected String preferredID()
    {
        return PREFERRED_ID;
    }
    
    private PaletteController initializePalette()
    {
        try
        {
            return PaletteFactory.createPalette(  "ActorEditorPalette",new PaletteActions()
            {
                public Action[] getCustomCategoryActions(Lookup lookup)
                {
                    return new Action[0];
                }
                public Action[] getCustomItemActions(Lookup lookup)
                {
                    return new Action[0];
                }
                public Action[] getCustomPaletteActions()
                {
                    return new Action[0];
                }
                public Action[] getImportActions()
                {
                    return new Action[0];
                }
                public Action getPreferredAction(Lookup lookup)
                {
                    return null; //TODO
                }
            });
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
            
        }
        return null;
    }
    
    
    public static ActorEditorTopComponent getInstance(String name,actorDataObject a)
    {
        //this.a = a;
        // look for an open instance containing this feed
        Iterator opened = TopComponent.getRegistry().getOpened().iterator();
        while (opened.hasNext())
        {
            Object tc = opened.next();
            if (tc instanceof ActorEditorTopComponent)
            {
                ActorEditorTopComponent elc = (ActorEditorTopComponent)tc;
                System.out.println(name+" "+elc.path);
                if (name.equals(elc.path))
                {
                    //elc.requestActive();
                    return elc;
                }
            }
        }
        
        // none found, make a new one
        return new ActorEditorTopComponent(a);
    }
    
    
    final static class ResolvableHelper implements Serializable
    {
        private static final long serialVersionUID = 1L;
        public Object readResolve()
        {
            return ActorEditorTopComponent.getDefault();
        }
    }
    
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == explorerManager &&
                ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName()))
        {
            setActivatedNodes(explorerManager.getSelectedNodes());
        }
    }
    private actorDataObject a;
    
    
}
