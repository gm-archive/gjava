/*
 * Actoreditor.java
 *
 * Created on 06 May 2007, 01:05
 */

package org.gjava.actoreditor;


import java.awt.Container;
import javax.swing.Action;
import org.gjava.actoreditor.beans.EventList;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.util.Enumeration;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.explorer.ExplorerManager;
import org.openide.filesystems.FileLock;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;

/**
 *
 * @author  ali1
 */
public class Actoreditor extends TopComponent implements PropertyChangeListener {
    public actorDataObject a;
    public actorDataObject ado;
    public String path = "";
    public String image="";
    static final String ICON_PATH = "org/gjava/actoreditor/object.png";
    public EventList eventList;
    
    public String oldDisplayName;
    private ExplorerManager explorerManager;
    /** Creates new form Actoreditor */
    public Actoreditor(actorDataObject a) {
        this(new InstanceContent());
        this.a = a;
        this.oldDisplayName = this.getHtmlDisplayName();
        this.a.ae = this;
        path = a.getPrimaryFile().getPath();
        this.ado = a;
    }
    
    public Actoreditor(InstanceContent content) {
        
        super(new org.openide.util.lookup.AbstractLookup(content));
        
        explorerManager = new org.openide.explorer.ExplorerManager();
        explorerManager.addPropertyChangeListener(this);
        content.add(explorerManager);
        final org.netbeans.spi.palette.PaletteController controller = initializePalette();
        
        content.add(controller);
        controller.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            
            public void propertyChange(java.beans.PropertyChangeEvent arg0) {
            }
        });
        initComponents();
        actionList1.setDragEnabled(true);
        setName(org.openide.util.NbBundle.getMessage(org.gjava.actoreditor.ActorEditorTopComponent.class,
                "CTL_ActorEditorTopComponent"));
        setToolTipText(org.openide.util.NbBundle.getMessage(org.gjava.actoreditor.ActorEditorTopComponent.class,
                "HINT_ActorEditorTopComponent"));
        setIcon(org.openide.util.Utilities.loadImage(ICON_PATH, true));
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        topComponent1 = new org.openide.windows.TopComponent();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        actionList1 = new org.gjava.actoreditor.beans.ActionList(this);
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        javax.swing.JList eventList = new org.gjava.actoreditor.beans.EventList(this);
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerSize(8);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setForeground(new java.awt.Color(0, 51, 255));
        jLabel3.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jLabel3.text")); // NOI18N

        actionList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(actionList1);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addContainerGap(670, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        jLabel2.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jLabel2.text")); // NOI18N

        this.eventList = (EventList)eventList;
        eventList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        eventList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                eventListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(eventList);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .add(113, 113, 113))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 167, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        jButton1.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jButton1.text")); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jCheckBox1.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jCheckBox1.text")); // NOI18N
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jCheckBox2.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jCheckBox2.text")); // NOI18N
        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox2.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel4.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jLabel4.text")); // NOI18N
        jScrollPane3.setViewportView(jLabel4);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jTextField1.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(Actoreditor.class, "jLabel5.text")); // NOI18N

        jScrollPane4.setViewportView(jEditorPane1);

        org.jdesktop.layout.GroupLayout topComponent1Layout = new org.jdesktop.layout.GroupLayout(topComponent1);
        topComponent1.setLayout(topComponent1Layout);
        topComponent1Layout.setHorizontalGroup(
            topComponent1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, topComponent1Layout.createSequentialGroup()
                .add(topComponent1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(topComponent1Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(topComponent1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                        .add(jCheckBox1)
                        .add(jCheckBox2)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(topComponent1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4, 0, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 915, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        topComponent1Layout.setVerticalGroup(
            topComponent1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(topComponent1Layout.createSequentialGroup()
                .add(topComponent1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(topComponent1Layout.createSequentialGroup()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 158, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jCheckBox1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jCheckBox2)
                        .add(18, 18, 18)
                        .add(topComponent1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jButton1))
                    .add(jSplitPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1088, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(0, 0, Short.MAX_VALUE)
                    .add(topComponent1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 509, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(0, 0, Short.MAX_VALUE)
                    .add(topComponent1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
 * Used to stop errors occuring from generated code, Don't use!
 */
public void pack()
    {     
    }
    
    public Container getContentPane()
    {
        return this;
    }
    
    private void setDefaultCloseOperation(int i)
    {
        
    }    
    
private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    try     {
        savefile();
        a.setModified(false);
        a.writejava();
    } catch (IOException ex) {
        Exceptions.printStackTrace(ex);
    }
}//GEN-LAST:event_jButton1MouseClicked

private void savefile() {
    FileLock lock;
    try {
        lock= ado.getPrimaryFile().lock();
    } catch (Exception e) {
        return;
    }
    {
        java.io.PrintWriter to = null;
        
        try {
            to = new java.io.PrintWriter(ado.getPrimaryFile().getOutputStream(lock));
            try {
                to.println("<?xml version=\"1.0\"?>");
                
                if (jLabel4.getIcon() == null)
                    to.println("<Image>null</Image>");
                else
                    to.println("<Image>"+this.image+"</Image>");
                
                if (jCheckBox1.isSelected() == true)
                    to.println("<Solid>True</Solid>");
                else
                    to.println("<Solid>False</Solid>");
                if (jCheckBox2.isSelected() == true)
                    to.println("<Visible>True</Visible>");
                else
                    to.println("<Visible>False</Visible>");
                
                //save events/actions
                for (Enumeration e = eventList.events.elements() ; e.hasMoreElements() ;) {
                    Value v = (Value)e.nextElement();
                    to.println("<Event>");
                    to.println("<Name>"+v.value+"</Name>");
                    to.println("<Image>"+v.img+"</Image>");
                    
                    for (Enumeration ee = v.actions.elements() ; ee.hasMoreElements() ;) {
                        ActionValue vv = (ActionValue)ee.nextElement();
                        to.println("<Action>");
                        to.println("<Name>"+vv.value+"</Name>");
                        to.println("<Image>"+vv.img+"</Image>");
                        to.println("<Code>"+vv.code+"</Code>");
                        to.println("</Action>");
                    }
                    to.println("</Event>");
                }
            } finally {
                to.close();
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        } finally {
            lock.releaseLock();
            to.close();
        }
    }
    
}

public void openfile() throws Exception {
    
    eventList.events.clear();
    BufferedReader from=new BufferedReader(new InputStreamReader(ado.getPrimaryFile().getInputStream()));
    try {
        String line;
        while ((line=from.readLine()) != null) {
            if (line.contains("<Image>") && line.contains("</Image>")) {
                this.image = line.replaceAll("<Image>", "").replaceAll("</Image>", "");
                if (!this.image.equals("null") )
                    jLabel4.setIcon(new ImageIcon(this.image));
            }
            if (line.contains("<Solid>") && line.contains("</Solid>")) {
                if (line.contains("True") )
                    
                    jCheckBox1.setSelected(true);
                
                else
                    jCheckBox1.setSelected(false);
            }
            if (line.contains("<Visible>") && line.contains("</Visible>")) {
                if (line.contains("True") )
                    
                    jCheckBox2.setSelected(true);
                
                else
                    jCheckBox2.setSelected(false);
            }
            
            if (line.equals("<Event>")) {
                line=from.readLine();
                String name="",img="",code="";
                if (line.contains("<Name>") && line.contains("</Name>")) {
                    name = line.replaceAll("<Name>", "").replaceAll("</Name>", "");
                }
                line=from.readLine();
                if (line.contains("<Image>") && line.contains("</Image>")) {
                    img = line.replaceAll("<Image>", "").replaceAll("</Image>", "");
                    
                }
                eventList.events.addElement(new Value(name,img, new DefaultListModel() )) ;
                
                line=from.readLine();
                while (!line.equals("</Event>")) {
                    //get actions
                    if (line.equals("<Action>")) {
                        line=from.readLine();
                        if (line.contains("<Name>") && line.contains("</Name>")) {
                            name = line.replaceAll("<Name>", "").replaceAll("</Name>", "");
                        }
                        line=from.readLine();
                        if (line.contains("<Image>") && line.contains("</Image>")) {
                            img = line.replaceAll("<Image>", "").replaceAll("</Image>", "");
                            System.out.println(img);
                        }
                        line=from.readLine();
                        if (line.contains("<Code>") && line.contains("</Code>")) {
                            code = line.replaceAll("<Image>", "").replaceAll("</Image>", "");
                            System.out.println(img);
                        }
                        line=from.readLine();//</Action>
                        // add the action
                        Value v = (Value)eventList.events.lastElement();
                        v.actions.addElement(new ActionValue(name,img,code ));
                    }
                    line=from.readLine();
                }
                
            }
            
        }
    } finally {
        from.close();
    }
}


private void eventListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_eventListValueChanged
    if (eventList.getSelectedValue() == null) {
        return;
    }
    actionList1.setModel(((Value) eventList.getSelectedValue()).actions);
}//GEN-LAST:event_eventListValueChanged

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            //new Actoreditor().setVisible(true);
        }
    });
}

private PaletteController initializePalette() {
    try {
        return PaletteFactory.createPalette(    "ActorEditorPalette",new PaletteActions() {
            public Action[] getCustomCategoryActions(Lookup lookup) {
                return new Action[0];
            }
            public Action[] getCustomItemActions(Lookup lookup) {
                return new Action[0];
            }
            public Action[] getCustomPaletteActions() {
                return new Action[0];
            }
            public Action[] getImportActions() {
                return new Action[0];
            }
            public Action getPreferredAction(Lookup lookup) {
                return null; //TODO
            }

                
        });
    } catch (IOException ex) {
        ex.printStackTrace();
        
    }
    return null;
}


public static Actoreditor getInstance(String name,actorDataObject a) {
    //this.a = a;
    // look for an open instance containing this feed
    Iterator opened = TopComponent.getRegistry().getOpened().iterator();
    while (opened.hasNext()) {
        Object tc = opened.next();
        if (tc instanceof Actoreditor) {
            Actoreditor elc = (Actoreditor)tc;
            System.out.println(name+" "+elc.path);
            if (name.equals(elc.path)) {
                //elc.requestActive();
                return elc;
            }
        }
    }
    
    // none found, make a new one
    return new Actoreditor(a);
}


final static class ResolvableHelper implements Serializable {
    private static final long serialVersionUID = 1L;
    public Object readResolve() {
        return ActorEditorTopComponent.getDefault();
    }
}

public void propertyChange(PropertyChangeEvent evt) {
    if (evt.getSource() == explorerManager &&
            ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
        setActivatedNodes(explorerManager.getSelectedNodes());
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList actionList1;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField1;
    private org.openide.windows.TopComponent topComponent1;
    // End of variables declaration//GEN-END:variables
    
}
