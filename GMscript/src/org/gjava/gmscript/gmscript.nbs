# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.



########### tokens #############################################################

TOKEN:comment:("/*"):<IN_COMMENT>

<IN_COMMENT> {

    TOKEN:comment_keyword: (
	"@author" |
	"@code" |
	"@docRoot" |
	"@deprecated" |
	"@exception" |
	"@inheritDoc" |
	"@link" |
	"@linkplain" |
	"@literal" |
	"@param" |
	"@return" |
	"@see" |
	"@serial" |
	"@serialData" |
	"@serialField" |
	"@since" |
	"@throws" |
	"@value" |
	"@version"
    )
	
    TOKEN:comment: ([^"@""*"]+)
   # TOKEN:comment: ("*"[^"/"])
    TOKEN:comment: ("*/"):<DEFAULT>
}

TOKEN:line_comment: ("//"[^"\n""\r"]*)
TOKEN:keyword: (
    "abstract" |
    "assert" |
    "boolean" |
    "break" |
    "byte" |
    "case" |
    "catch" |
    "char" |
    "class" |
    "const" |
    "continue" |
    "default" |
    "do" |
    "double" |
    "else" |
    "enum" |
    "extends" |
    "false" |
    "final" |
    "finally" |
    "float" |
    "for" |
    "goto" |
    "if" |
    "implements" |
    "import" |
    "instanceof" |
    "int" |
    "interface" |
    "long" |
    "native" |
    "new" |
    "null" |
    "package" |
    "private" |
    "protected" |
    "public" |
    "return" |
    "short" |
    "static" |
    "strictfp" |
    "super" |
    "switch" |
    "synchronized" |
    "this" |
    "throw" |
    "throws" |
    "transient" |
    "true" |
    "try" |
    "void" |
    "volatile" |
    "while"
)

TOKEN:operator: (
    "==" | "!=" | "<=" | ">=" | "?" | ":" | "<" | ">" | "/" | "*" | "-" | 
    "+" | "." | "," | "=" | "(" | ")" | "[" | "]" | "!" | "@" | "#" | "$" | 
    "%" | "^" | "&" | "~" | "|" | "\\"
)

TOKEN:separator: ( [";" "{" "}"] )

TOKEN:block:("{" "}")

TOKEN:identifier: (
    ["a"-"z" "A"-"Z"] 
    [^" " "\t" "\n" "\r" "?" ":" "<" ">" "/" "*" "-" "+" "." "," "=" "{" "}"
      "(" ")" "[" "]" "!" "@" "#" "$" "%" "^" "&" "~" "|" "\\" ";" 
    ]*
)

TOKEN:js_string: (
    "\"" ( 
        [^ "\\" "\"" "\n" "\r"] |
        ("\\" (
            . |
            (["0"-"7"] ["0"-"7"] ["0"-"7"]) |
            ("x" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"]) |
            ("u" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"])
        ))
    )* 
    "\""
)

TOKEN:string: (
    "\""
        ["a"-"z" "A"-"Z" " " "\t" "\n" "\r" "?" ":" "<" ">" "/" "*" "-" "+" "." "," "=" "{" "}"
      "(" ")" "[" "]" "!" "@" "#" "$" "%" "^" "&" "~" "|" "\\" ";" 
    ]*
    "\""
)

TOKEN:char: (
    "\'"
	( [^"\'" "\n" "\r"] |
	  ("\\" ["r" "n" "t" "\\" "\'" "\""])
	)
    "\'"
)

TOKEN:number: (["0"-"9"] ["0"-"9" "."]*)

TOKEN:whitespace: ([" " "\t" "\n" "\r"]+)
TOKEN:dot:(".")



########### grammar ############################################################

SKIP:whitespace
SKIP:comment
SKIP:line_comment
SKIP:comment_keyword

S=(MethodDeclaration)* ;

FieldDeclaration = VariableModifiers Type VariableDeclarator ("," VariableDeclarator)* ";";
VariableModifiers = ("public" | "protected" | "private" | "static" | 
                     "transient" |  "final" | "volatile")*;
VariableDeclarator = VariableDeclaratorId "=" VariableInitializer;
VariableDeclarator = VariableDeclaratorId;
VariableDeclaratorId = <identifier> Brackets;
VariableInitializer = ArrayInitializer;
VariableInitializer = Expression;
ArrayInitializer = "{" VariableInitializers ArrayInitializer1 "}";
ArrayInitializer1 = ",";
ArrayInitializer1 = ;
VariableInitializers = VariableInitializer VariableInitializers1;
VariableInitializers = ;
VariableInitializers1 = "," VariableInitializers VariableInitializers1;
VariableInitializers1 = ;
MethodDeclaration = MethodModifiers ResultType MethodDeclarator MethodDeclaration1;
MethodDeclaration1 = Block;
MethodDeclaration1 = ";";
MethodModifiers = "public" MethodModifiers;
MethodModifiers = "protected" MethodModifiers;
MethodModifiers = "private" MethodModifiers;
MethodModifiers = "static" MethodModifiers;
MethodModifiers = "abstract" MethodModifiers;
MethodModifiers = "final" MethodModifiers;
MethodModifiers = "native" MethodModifiers;
MethodModifiers = "synchronized" MethodModifiers;
MethodModifiers = ;
MethodDeclarator = <identifier> "(" FormalParameters ")" Brackets;
FormalParameters = FormalParameter FormalParameters1;
FormalParameters = ;
FormalParameters1 = "," FormalParameter FormalParameters1;
FormalParameters1 = ;
FormalParameter = Type VariableDeclaratorId;
FormalParameter = "final" Type VariableDeclaratorId;
ConstructorDeclaration = ConstructorDeclarationModifiers <identifier> "(" FormalParameters ")" Throws
  "{"
    ExplicitConstructorInvocation
    BlockStatements
  "}";
ConstructorDeclarationModifiers = "public";
ConstructorDeclarationModifiers = "protected";
ConstructorDeclarationModifiers = "private";
ConstructorDeclarationModifiers = ;

ExplicitConstructorInvocation = "this" Arguments ";";
ExplicitConstructorInvocation = "super" Arguments ";";
ExplicitConstructorInvocation = PrimaryExpression "." "super" Arguments ";";
ExplicitConstructorInvocation = ;
Initializer = "static" Block;
Initializer = Block;
Type = PrimitiveType Brackets;
Type = Name Brackets;
Brackets = "[" "]" Brackets;
Brackets = ;
PrimitiveType = "boolean";
PrimitiveType = "char";
PrimitiveType = "byte";
PrimitiveType = "short";
PrimitiveType = "int";
PrimitiveType = "long";
PrimitiveType = "float";
PrimitiveType = "double";
ResultType = "void";
ResultType = Type;
Name = <identifier> Name1;
Name1 = "." <identifier> Name1;
Name1 = ;
NameList = Name "," NameList;
NameList = Name;

Expression = ConditionalExpression;
# Name? 
Expression = Name Expression1;
Expression1 = "=" Expression;
Expression1 = "*=" Expression;
Expression1 = "/=" Expression;
Expression1 = "%=" Expression;
Expression1 = "+=" Expression;
Expression1 = "-=" Expression;
Expression1 = "<<=" Expression;
Expression1 = ">>=" Expression;
Expression1 = ">>>=" Expression;
Expression1 = "&=" Expression;
Expression1 = "^=" Expression;
Expression1 = "|=" Expression;
#ConditionalExpression = ConditionalOrExpression ["?" Expression ":" ConditionalExpression];
ConditionalExpression = ConditionalOrExpression ConditionalExpression1;
ConditionalExpression1 = "?" Expression ":" ConditionalExpression;
ConditionalExpression1 = ;
ConditionalOrExpression = ConditionalAndExpression ConditionalOrExpression1;
ConditionalOrExpression1 = "||" ConditionalOrExpression;
ConditionalOrExpression1 = ;
ConditionalAndExpression = InclusiveOrExpression ConditionalAndExpression1;
ConditionalAndExpression1 = "&&" ConditionalAndExpression;
ConditionalAndExpression1 = ;
InclusiveOrExpression = ExclusiveOrExpression InclusiveOrExpression1;
InclusiveOrExpression1 = "|" InclusiveOrExpression;
InclusiveOrExpression1 = ;
ExclusiveOrExpression = AndExpression ExclusiveOrExpression1;
ExclusiveOrExpression1 = "^" ExclusiveOrExpression;
ExclusiveOrExpression1 = ;
AndExpression = EqualityExpression AndExpression1;
AndExpression1 = "&" AndExpression;
AndExpression1 = ;
EqualityExpression = InstanceOfExpression EqualityExpression1;
EqualityExpression1 = "==" InstanceOfExpression EqualityExpression1;
EqualityExpression1 = "!=" InstanceOfExpression EqualityExpression1;
EqualityExpression1 = ;
InstanceOfExpression = RelationalExpression InstanceOfExpression1;
InstanceOfExpression1 = "instanceof" Type;
InstanceOfExpression1 = ;
RelationalExpression = ShiftExpression RelationalExpression1;
RelationalExpression1 = "<" RelationalExpression;
RelationalExpression1 = ">" RelationalExpression;
RelationalExpression1 = "<=" RelationalExpression;
RelationalExpression1 = ">=" RelationalExpression;
RelationalExpression1 = ;
ShiftExpression = AdditiveExpression ShiftExpression1;
ShiftExpression1 = "<<" ShiftExpression;
ShiftExpression1 = ">>" ShiftExpression;
ShiftExpression1 = ">>>" ShiftExpression;
ShiftExpression1 = ;
AdditiveExpression = MultiplicativeExpression "+" AdditiveExpression;
AdditiveExpression = MultiplicativeExpression "-" AdditiveExpression;
AdditiveExpression = MultiplicativeExpression;
MultiplicativeExpression = UnaryExpression MultiplicativeExpression1;
MultiplicativeExpression1 = "*" UnaryExpression MultiplicativeExpression1;
MultiplicativeExpression1 = "/" UnaryExpression MultiplicativeExpression1;
MultiplicativeExpression1 = "%" UnaryExpression MultiplicativeExpression1;
MultiplicativeExpression1 = ;
UnaryExpression = "+" UnaryExpression;
UnaryExpression = "-" UnaryExpression;
UnaryExpression = PreIncrementExpression;
UnaryExpression = PreDecrementExpression;
UnaryExpression = UnaryExpressionNotPlusMinus;
PreIncrementExpression = "++" PrimaryExpression;
PreDecrementExpression = "--" PrimaryExpression;
UnaryExpressionNotPlusMinus = "~" UnaryExpression;
UnaryExpressionNotPlusMinus = "!" UnaryExpression;
UnaryExpressionNotPlusMinus = CastExpression;
UnaryExpressionNotPlusMinus = PostfixExpression;
PostfixExpression = PrimaryExpression PostfixExpression1;
PostfixExpression1 = "++";
PostfixExpression1 = "--";
PostfixExpression1 = ;
CastExpression = "(" Type ")" UnaryExpression;
CastExpression = "(" Type ")" UnaryExpressionNotPlusMinus;
PrimaryExpression = PrimaryPrefix PrimaryExpression1;
PrimaryExpression1 = PrimarySuffix PrimaryExpression1;
PrimaryExpression1 = ;
PrimaryPrefix = Literal;
PrimaryPrefix = "this";
PrimaryPrefix = "super" "." <identifier>;
PrimaryPrefix = "(" Expression ")";
PrimaryPrefix = AllocationExpression;
PrimaryPrefix = ResultType "." "class";
PrimaryPrefix = Name;
PrimarySuffix = "." PrimarySuffix1;
PrimarySuffix1 = "this";
PrimarySuffix1 = AllocationExpression;
PrimarySuffix1 = <identifier>;
PrimarySuffix = "[" Expression "]";
PrimarySuffix = Arguments;
Literal = <number>;
#Literal = <FLOATING_POINT_LITERAL>;
Literal = <char>;
Literal = <string>;
Literal = "true";
Literal = "false";
Literal = "null";

Arguments = "(" ArgumentList ")";
ArgumentList = Expression ArgumentList1;
ArgumentList = ;
ArgumentList1 = "," ArgumentList;
ArgumentList1 = ;
AllocationExpression = "new" AllocationExpression1;
AllocationExpression1 = PrimitiveType ArrayDimsAndInits;
AllocationExpression1 = Name AllocationExpression2;
AllocationExpression2 = ArrayDimsAndInits;
AllocationExpression2 = Arguments AllocationExpression3;
AllocationExpression3 = "{" ClassBody "}";
AllocationExpression3 = ;
 
ArrayDimsAndInits = "[" Expression "]" ArrayDimsAndInits1;
ArrayDimsAndInits = "[" "]" ArrayDimsAndInits2 ArrayInitializer;
ArrayDimsAndInits1 = "[" Expression "]" ArrayDimsAndInits1;
ArrayDimsAndInits1 = ;
ArrayDimsAndInits1 = "[" "]" ArrayDimsAndInits2;
ArrayDimsAndInits2 = "[" "]" ArrayDimsAndInits2;
ArrayDimsAndInits2 = ;

Statement = LabeledStatement;
Statement = Block;
Statement = EmptyStatement;
Statement = StatementExpression ";";
Statement = SwitchStatement;
Statement = IfStatement;
Statement = WhileStatement;
Statement = DoStatement;
Statement = ForStatement;
Statement = BreakStatement;
Statement = ContinueStatement;
Statement = ReturnStatement;
Statement = SynchronizedStatement;

LabeledStatement = <identifier> ":" Statement;
Block = "{" BlockStatements "}";
Block = "{}";
BlockStatements = BlockStatement BlockStatements;
BlockStatements = ;
BlockStatement = LocalVariableDeclaration ";";
BlockStatement = Statement;
LocalVariableDeclaration = "final" Type VariableDeclarator LocalVariableDeclaration1;
LocalVariableDeclaration = Type VariableDeclarator LocalVariableDeclaration1;
LocalVariableDeclaration1 = "," VariableDeclarator LocalVariableDeclaration1;
LocalVariableDeclaration1 = ;
EmptyStatement = ";";
StatementExpression = PreIncrementExpression;
StatementExpression = PreDecrementExpression;
StatementExpression = PrimaryExpression StatementExpression1;
StatementExpression1 = "++";
StatementExpression1 = "--";
StatementExpression1 = ;
StatementExpression1 = "=" Expression;
StatementExpression1 = "*=" Expression;
StatementExpression1 = "/=" Expression;
StatementExpression1 = "%=" Expression;
StatementExpression1 = "+=" Expression;
StatementExpression1 = "-=" Expression;
StatementExpression1 = "<<=" Expression;
StatementExpression1 = ">>=" Expression;
StatementExpression1 = ">>>=" Expression;
StatementExpression1 = "&=" Expression;
StatementExpression1 = "^=" Expression;
StatementExpression1 = "|=" Expression;

SwitchStatement = "switch" "(" Expression ")" "{" SwitchBody "}";
SwitchBody = SwitchLabel BlockStatements SwitchBody;
SwitchBody = ;
BlockStatements = BlockStatement BlockStatements;
BlockStatements = ;
SwitchLabel = "case" Expression ":";
SwitchLabel = "default" ":";
IfStatement = "if" "(" Expression ")" Statement IfStatement1;
IfStatement1 = "else" Statement;
IfStatement1 = ;
WhileStatement = "while" "(" Expression ")" Statement;
DoStatement = "do" Statement "while" "(" Expression ")" ";";
ForStatement = "for" "(" ForInit ";" ForExpression ";" ForUpdate ")" Statement;
ForInit = LocalVariableDeclaration;
ForInit = StatementExpressionList;
ForInit = ;
ForExpression = Expression;
ForExpression = ;
StatementExpressionList = StatementExpression StatementExpressionList1;
StatementExpressionList1 = "," StatementExpression StatementExpressionList1;
StatementExpressionList1 = ;
ForUpdate = StatementExpressionList;
ForUpdate = ;
BreakStatement = "break" BreakStatement1;
BreakStatement1 = ";";
BreakStatement1 = <identifier> ";";
ContinueStatement = "continue" ContinueStatement1;
ContinueStatement1 = ";";
ContinueStatement1 = <identifier> ";";
ReturnStatement = "return" ReturnStatement1;
ReturnStatement1 = ";";
ReturnStatement1 = Expression ";";
ThrowStatement = "throw" Expression ";";
SynchronizedStatement = "synchronized" "(" Expression ")" Block;



########### colors #############################################################

COLOR:separator: {
    color_name: "operator";
}

COLOR:method_name: {
    color_name: "method";
    default_coloring: "default";
    font_type: "bold";
}

COLOR:comment_keyword: {
    color_name: "comment_keyword";
    default_coloring: "comment";
    font_type: "bold+italic";
    underline_color:"gray";
}

MARK:ERROR: {
    type:"Error";
    message:"LBL_UNPAIRED_END_TAG";
}
MARK:error: {
    type:"Error";
    message:"LBL_UNEXPECTED_CHARACTER";
}

########### brace matching #####################################################

BRACE "(:)"
BRACE "{:}"
BRACE "[:]"
BRACE "def:end"


########### code folding #######################################################


#FOLD:block

FOLD:Block:"{...}"

FOLD:comment: {
    fold_display_name:"Comment";
    expand_type_action_name:"Expand Comments";
    collapse_type_action_name:"Collapse Comments";
}

########### indentation ########################################################

REFORMAT:Method_Body.other:"++i"
REFORMAT:other:"i"

INDENT "(:)"
INDENT "{:}"
INDENT "[:]"

COMPLETE "(:)"
COMPLETE "{:}"
COMPLETE "\":\""
COMPLETE "':'"
COMPLETE "[:]"

########### navigator ##########################################################

NAVIGATOR:method: {
    display_name: "$method_name$ ($parametersList$)";
    tooltip: "$modifiers$ $type$ $method_name$ ($parametersList$) $throws$";
    icon: "/org/netbeans/modules/languages/resources/method.gif";
}

NAVIGATOR:variable: {
    display_name: "$name$ $type$";
    tooltip: "$modifiers$ $type$ $name$ $type$ $initValue$";
    icon: "/org/netbeans/modules/languages/resources/variable.gif";
}

NAVIGATOR:constructor: {
    display_name: "$name$ ($parametersList$)";
    tooltip: "$modifiers$ $name$ ($parametersList$) $throws$";
    icon: "/org/netbeans/modules/languages/resources/constructor.gif";
}


########### code completion ####################################################
#COMPLETION:whitespace: {
 #   text1:"popups.";
 #   
#}
#COMPLETION:dot:{
#text1:"popups.if";
#    text2:"popups.else";
#}
