/*
 * CodeEditor2.java
 *
 * Created on 13 September 2007, 19:21
 */
package org.gcreator.editors;

import org.gcreator.components.scanning.GCLScanner;
import org.gcreator.components.scanning.Scanner;
import org.gcreator.components.SyntaxHighlighter;
import java.util.logging.*;
import javax.swing.text.BadLocationException;
import org.gcreator.components.TabPanel;
import org.gcreator.fileclass.Project;
import java.awt.*;
import java.beans.*;
import javax.swing.*;
import javax.swing.text.html.HTMLEditorKit;
import org.gcreator.api.util.*;
import org.gcreator.fileclass.res.Classes;
import org.gcreator.components.impl.*;

import publicdomain.*;

/**
 *
 * @author  Ali1
 */
public class GCLEditor extends TabPanel {

    public boolean changed = true;
    private SyntaxHighlighter g;

    public boolean Save() {
        file.value = g.getText();
        if (file.value == null) {
            file.value = "";
        }
        return true;
    }

    /** 
     * Creates new form GCLEditor
     * @param file 
     */
    public GCLEditor(org.gcreator.fileclass.GFile file, Project project) {
        this.file = file;
        this.project = project;
        initComponents();
        if (file.value == null) {
            file.value = new Classes("String examplefield = \"\"; \npublic void exampleFunction(){\n\t\n}");
        }
        Scanner scanner = new GCLScanner();
        g = new SyntaxHighlighter(100, 100, scanner, project);
        g.setText(file.value.toString());

        setLayout(new BorderLayout());
        add(BorderLayout.CENTER, jScrollPane1);
        jScrollPane1.setViewportView(g);
        
        g.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                changed = true;
            }
        });

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                g.requestFocusInWindow();
            }
        });
    }

    public boolean wasModified() {
        return changed;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

class ApiListCellRenderer extends JLabel implements ListCellRenderer {

    public ApiListCellRenderer() {
        setOpaque(true);
    }

    public Component getListCellRendererComponent(JList list,
            Object value,
            int index,
            boolean isSelected,
            boolean cellHasFocus) {
        String val = "";// = value.toString();

        // check if this cell represents the current DnD drop location
        //JList.DropLocation dropLocation = list.getDropLocation();

        if (value instanceof ApiFunction) {
            //  icon = ((org.gcreator.actions.ActionPattern) value).getStandardImage();
            val = ((ApiFunction) value).name;

        } else if (value instanceof ApiClass) {
            // icon = ((org.gcreator.actions.ActionCategory) value).icon;
            val = ((ApiClass) value).name;

        }
        setText(val);
        //setIcon(icon);
        return this;
    }
}
