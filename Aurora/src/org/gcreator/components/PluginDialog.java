/*
 * Copyright (C) 2007-2008 Luís Reis <luiscubal@gmail.com>
 * Copyright (C) 2007-2008 TGMG <thegamemakerguru@hotmail.com>
 * Copyright (C) 2008 Serge Humphrey <bob@bobtheblueberry.com>
 *
 * This file is part of G-Creator.
 * G-Creator is free software and comes with ABSOLUTELY NO WARRANTY.
 * See LICENSE for more details.
 */
package org.gcreator.components;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.gcreator.components.impl.CustomFileFilter;
import org.gcreator.core.ClassLoading;
import org.gcreator.core.GPanel;
import org.gcreator.extended.JarClassLoader;
import org.gcreator.core.utilities;
import org.gcreator.extended.StringInputStream;
import org.gcreator.managers.Registry;
import org.gcreator.plugins.Jar;
import org.gcreator.plugins.Plugger;
import org.gcreator.plugins.Plugin;
import org.gcreator.plugins.PluginCore;
import org.gcreator.plugins.PluginList;
import org.gcreator.sax.SAXParser;
import org.gcreator.units.BeanFile;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author  Luís Reis
 */
public class PluginDialog extends JDialog {

    private static final long serialVersionUID = 1;
    /** Creates new form PluginDialog */
    public IconList list;

    public PluginDialog(GPanel parent, boolean modal) {
        super(parent.getICore().getParentWindow());
        setModal(modal);
        initComponents();
        list = new IconList();
        list.setColumnWidth(100);
        list.setColumnHeight(100);
        list.setColumns(5);
        jScrollPane1.setViewportView(list);
        for (Plugin plugin : PluginList.getStdList().plugins) {
            System.out.println("Plugin: " + plugin.name);
            list.addElement(plugin.name, plugin.image, plugin);
        }
        pack();
        setMinimumSize(getSize());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Plugin Manager");

        jScrollPane1.setMinimumSize(new java.awt.Dimension(27, 120));
        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gcreator/resources/refresh.png"))); // NOI18N
        jButton3.setText("Reload");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Uninstall plugin");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Install new plugin");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Reinstall plugin");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jButton3))
                .addGap(11, 11, 11)
                .addComponent(jButton4)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fc = new JFileChooser((Registry.exists("Directories.pluginDialog")) ? (BeanFile) Registry.get("Directories.pluginDialog") : null);
        fc.setMultiSelectionEnabled(false);
        fc.setDialogTitle("Choose the file");
        fc.setApproveButtonText("OK");
        fc.setFileFilter(new CustomFileFilter(".jar", "Plugin archives (*.jar)"));
        if (fc.showOpenDialog(this) == JFileChooser.CANCEL_OPTION) {
            return;
        }
        Registry.set("Directories.pluginDialog", new BeanFile(fc.getCurrentDirectory()));
        File f = fc.getSelectedFile();
        if (f == null) {
            return;
        }
        if (!f.exists()) {
            return;
        }
        addPlugin(f);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Object o = list.getSelectedExtraContent();
        if (o == null) {
            return;
        }
        if (o instanceof Plugin) {
            uninstall((Plugin) o);
            list.removeElement(list.getSelectedIndex());
            PluginList.getStdList().plugins.remove(o);
            list.repaint();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Plugger.reloadPlugins();
    }//GEN-LAST:event_jButton3ActionPerformed

    @SuppressWarnings("unchecked")
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (list.getSelectedExtraContent() == null) {
            return;
        }
        Plugin p = (Plugin) list.getSelectedExtraContent();
        JFileChooser fc = new JFileChooser((Registry.exists("Directories.pluginDialog")) ? (BeanFile) Registry.get("Directories.pluginDialog") : null);
        fc.setFileFilter(new JFileFilter(".*\\.jar$", "G-Creator Plugins (*.jar)"));
        if (fc.showOpenDialog(this) == JFileChooser.CANCEL_OPTION) {
            return;
        }
        File f = fc.getSelectedFile();
        Registry.set("Directories.pluginDialog", new BeanFile(fc.getCurrentDirectory()));
        if (f == null || !f.exists()) {
            return;
        }

        PluginList.getStdList().plugins.remove(list.getSelectedExtraContent());
        list.removeElement(list.getSelectedIndex());
        uninstall(p);
        p = null;
        System.gc();
        addPlugin(f);
    }//GEN-LAST:event_jButton4ActionPerformed

    public void uninstall(Plugin plugin) {
        plugin.value.uninstall();
        Document doc = getDocument(PluginList.PLUGLIST);
        doc.setXmlVersion("1.0");
        doc.setXmlStandalone(true);
        Element root = doc.getDocumentElement();
        NodeList nodes = root.getChildNodes();
        loop:
        for (int i = 0; i < nodes.getLength(); i++) {
            Node n = nodes.item(i);
            NodeList childnodenodes = n.getChildNodes();
            for (int j = 0; j < childnodenodes.getLength(); j++) {
                Node cn = childnodenodes.item(j);
                if (cn.getNodeName() != null && cn.getNodeName().equals("name") &&
                        cn.getTextContent() != null && cn.getTextContent().equals(plugin.name)) {
                    root.removeChild(n);
                    break loop;
                }
            }
        }
        try {
            DOMSource source = new DOMSource(doc);
            Result result = new StreamResult(PluginList.PLUGLIST);
            Transformer xformer = TransformerFactory.newInstance().newTransformer();
            xformer.transform(source, result);
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void addPlugin(File jar) {
        BufferedInputStream istream = null;
        ZipInputStream in = null;
        try {
            istream = new BufferedInputStream(new FileInputStream(jar));
            in = new ZipInputStream(istream);
        } catch (IOException e) {
            return;
        }
        ZipEntry entry;
        boolean failed = false;
        StringBuffer data = new StringBuffer(120);
        try {
            while ((entry = in.getNextEntry()) != null) {
                if (entry.getName().equalsIgnoreCase("plugin.xml")) {
                    int len;
                    while ((len = in.read()) != -1) {
                        data.append(new char[]{(char) (len)});
                    }
                    break;
                }
            }
            if (entry == null) {
                JOptionPane.showMessageDialog(this, jar.getName() +
                        " is not a valid G-Creator plug-in (no plugin.xml file).", "Error", JOptionPane.ERROR_MESSAGE);
                failed = true;
            }
        } catch (IOException e) {
        } finally {
            try {
                in.close();
            } catch (IOException iOExc) {
            }
        }
        if (failed) {
            return;
        }
        Plugin plugin = null;
        try {
            SAXParser p = new SAXParser(new StringInputStream(data.toString()));
            plugin = PluginList.readPlugin(p.getRootNode(), false);
        } catch (SAXException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (plugin == null) {
            System.err.println("Error adding file " + jar + ".");
            return;
        }
        File jarFile = new File("./plugins/" + plugin.name + File.separator);
        try {
            jarFile.mkdirs();
            jarFile = utilities.copyFile(jar, jarFile);
        } catch (IOException exc) {
            System.err.println("Error while copying file '" + jar + "' to './plugins/" + plugin.name);
        }
        if (plugin == null) {
            System.out.println("Plugin is null!");
            return;
        }
        plugin.jar = new Jar(jarFile);
        Document doc = getDocument(PluginList.PLUGLIST);
            doc.setXmlVersion("1.0");
            doc.setXmlStandalone(true);
        if (doc == null) {
            doc = newDocument();
        }
        Element root = doc.getDocumentElement();
        if (root == null) {
            doc = newDocument();
            root = doc.createElement("pluglist");
            doc.appendChild(root);
        }
        Element e = doc.createElement("plugin");
        try {
            SAXParser parser = new SAXParser(new StringInputStream(data.toString()));
            org.gcreator.sax.Node proot = parser.getRootNode();
            for (int i = 0; i < proot.getChildrenCount(); i++) {
                org.gcreator.sax.Node node = proot.getChildAt(i);
                Element elem = doc.createElement(node.getName());
                elem.setTextContent(node.getContent());
                e.appendChild(elem);
            }
            Element elem = doc.createElement("jar");
            elem.setTextContent(jarFile.getPath());
            e.appendChild(elem);
            root.appendChild(e);
            DOMSource source = new DOMSource(doc);
            Result result = new StreamResult(PluginList.PLUGLIST);
            Transformer xformer = TransformerFactory.newInstance().newTransformer();
            xformer.transform(source, result);
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        root.appendChild(e);
        ClassLoading.classLoader.add(new JarClassLoader(plugin.jar));
        try {
            plugin.value = (PluginCore) ClassLoading.classLoader.loadClass(plugin.coreName).newInstance();
        } catch (InstantiationException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        Plugger.load(plugin.jar);
        PluginList.getStdList().plugins.add(plugin);
        plugin.value.onSplashDispose();
        list.addElement(plugin.name, plugin.image, plugin);
        list.repaint();
    }

    private static Document getDocument(String name) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setIgnoringElementContentWhitespace(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            return builder.parse(name);
        } catch (SAXException ex) {
            Logger.getLogger(Registry.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Registry.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(Registry.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private static Document newDocument() {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setIgnoringElementContentWhitespace(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            return builder.newDocument();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(Registry.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
